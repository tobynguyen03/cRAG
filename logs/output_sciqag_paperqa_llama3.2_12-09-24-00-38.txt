Running experiment: sciqag_paperqa_llama3.2
saving results to: datasets/SciQAG/answer_results/paperqa_llama3.2 



 Skipping sciqag_question_1.json as sciqag_answer_1.json already exists. 


 Skipping sciqag_question_10.json as sciqag_answer_10.json already exists. 


 Skipping sciqag_question_100.json as sciqag_answer_100.json already exists. 


 Skipping sciqag_question_11.json as sciqag_answer_11.json already exists. 


 Skipping sciqag_question_12.json as sciqag_answer_12.json already exists. 


 Skipping sciqag_question_13.json as sciqag_answer_13.json already exists. 


 Skipping sciqag_question_14.json as sciqag_answer_14.json already exists. 


 Skipping sciqag_question_15.json as sciqag_answer_15.json already exists. 


 Skipping sciqag_question_16.json as sciqag_answer_16.json already exists. 


 Skipping sciqag_question_17.json as sciqag_answer_17.json already exists. 


 Skipping sciqag_question_18.json as sciqag_answer_18.json already exists. 


 Skipping sciqag_question_19.json as sciqag_answer_19.json already exists. 


 Skipping sciqag_question_2.json as sciqag_answer_2.json already exists. 


 Skipping sciqag_question_20.json as sciqag_answer_20.json already exists. 


 Skipping sciqag_question_21.json as sciqag_answer_21.json already exists. 


 Skipping sciqag_question_22.json as sciqag_answer_22.json already exists. 


 Skipping sciqag_question_23.json as sciqag_answer_23.json already exists. 


 Skipping sciqag_question_24.json as sciqag_answer_24.json already exists. 


 Skipping sciqag_question_25.json as sciqag_answer_25.json already exists. 


 Skipping sciqag_question_26.json as sciqag_answer_26.json already exists. 


 Skipping sciqag_question_27.json as sciqag_answer_27.json already exists. 


 Skipping sciqag_question_28.json as sciqag_answer_28.json already exists. 



 ANSWERING QUESTION: sciqag_question_29.json
 ----------------------------- 


Failed to answer question due to timeout: What is the significance of the detection limit (DL) in the analysis of phthalate esters?


 ANSWERING QUESTION: sciqag_question_3.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

Failed to answer question due to timeout: How was the diabetic rat model established in this study?

 Skipping sciqag_question_30.json as sciqag_answer_30.json already exists. 


 Skipping sciqag_question_31.json as sciqag_answer_31.json already exists. 


 Skipping sciqag_question_32.json as sciqag_answer_32.json already exists. 



 ANSWERING QUESTION: sciqag_question_33.json
 ----------------------------- 


[00:45:06] Starting paper search for 'MIPs stability cost production'.                                                                    
           paper_search for query 'MIPs stability cost production' and offset 0 returned 6 papers.                                        
           Status: Paper Count=6 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Generating answer for 'Why are MIPs considered stable, less costly, and easier to produce than their biological counterparts?'.
[00:45:23] Status: Paper Count=6 | Relevant Papers=2 | Current Evidence=5 | Current Cost=$0.0000                                          
           Answer: Molecularly imprinted polymers (MIPs) are considered stable, less costly, and easier to produce than their biological  
           counterparts due to their synthetic nature. According to Author2024 chunk 1, MIPs can be synthesized through covalent,         
           non-covalent, and sacrificial spacer methods, allowing for mass production and standardization.                                
                                                                                                                                          
           In contrast, biological systems are inherently complex and subject to variability, making them more challenging to design and  
           produce. Biological systems also have limitations such as degradation, loss of specificity, or enzymatic activity, which MIPs  
           do not experience (Author2024 chunk 3).                                                                                        
                                                                                                                                          
           MIPs offer advantages in terms of durability, scalability, and reproducibility, making them a promising alternative for various
           applications. They can be produced through various polymerization processes and designed to have specific structures and       
           properties that enhance their stability and selectivity.                                                                       
                                                                                                                                          
           ANSWER SUMMARY: MIPs are stable, less costly, and easier to produce than biological counterparts due to their synthetic nature,
           mass production capabilities, and lack of limitations such as degradation and variability.                                     

 Skipping sciqag_question_34.json as sciqag_answer_34.json already exists. 


 Skipping sciqag_question_35.json as sciqag_answer_35.json already exists. 



 ANSWERING QUESTION: sciqag_question_36.json
 ----------------------------- 


[00:45:25] Generating answer for 'How does the sample pH affect the potential response of the MIP based melamine ISE?'.                   
[00:45:26] Status: Paper Count=0 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Answer: To answer this question, we need to understand the terms involved:                                                     
                                                                                                                                          
           - **MIP**: Molecularly Imprinted Polymer                                                                                       
           - **ISE**: Ion-Selective Electrode                                                                                             
           - **Melamine ISE**: A specific type of ISE designed to detect melamine                                                         
           - **pH**: The measure of hydrogen ion concentration in a solution                                                              
                                                                                                                                          
           Based on the context, we can infer that the MIP-based melamine ISE is a sensor that uses a molecularly imprinted polymer to    
           selectively bind melamine. The pH of the sample could affect this binding process.                                             
                                                                                                                                          
           A higher or lower pH may alter the affinity of the MIP for melamine due to changes in the chemical environment. This, in turn, 
           could influence the potential response of the ISE.                                                                             
                                                                                                                                          
           Without specific information on how the MIP's affinity is affected by pH or how this translates into a measurable potential    
           response, it's difficult to provide a precise answer.                                                                          
                                                                                                                                          
           ANSWER SUMMARY: Sample pH may affect melamine ISE response due to changes in MIP binding affinity, but specifics are unknown.  


 ANSWERING QUESTION: sciqag_question_37.json
 ----------------------------- 


[00:45:27] Starting paper search for 'ion-exchanger resin columns in melamine detection'.                                                 
           paper_search for query 'ion-exchanger resin columns in melamine detection' and offset 0 returned 8 papers.                     
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
           gather_evidence starting for question 'What is the role of the ion-exchanger resin columns in the detection of melamine?'.     
got papers
[00:45:32] gather_evidence starting for question 'What is the role of the ion-exchanger resin columns in the detection of melamine?'.     
[00:45:39] Generating answer for 'What is the role of the ion-exchanger resin columns in the detection of melamine?'.                     
[00:45:43] Answer:                                                                                                                        

 Skipping sciqag_question_38.json as sciqag_answer_38.json already exists. 



 ANSWERING QUESTION: sciqag_question_39.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:48:06] Starting paper search for 'MIP based membrane electrode for the detection of melamine in milk'.                                
           paper_search for query 'MIP based membrane electrode for the detection of melamine in milk' and offset 0 returned 8 papers.    
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
[00:48:07] Starting paper search for 'MIP based membrane electrode for the detection of melamine in milk'.                                
           paper_search for query 'MIP based membrane electrode for the detection of melamine in milk' and offset 8 returned 0 papers.    
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
           gather_evidence starting for question 'How promising is the flow analysis system based on the MIP based membrane electrode for 
           the detection of melamine in milk?'.                                                                                           
[00:48:14] Generating answer for 'How promising is the flow analysis system based on the MIP based membrane electrode for the detection of
           melamine in milk?'.                                                                                                            

[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

Failed to answer question due to timeout: How promising is the flow analysis system based on the MIP based membrane electrode for the detection of melamine in milk?

 Skipping sciqag_question_4.json as sciqag_answer_4.json already exists. 


 Skipping sciqag_question_40.json as sciqag_answer_40.json already exists. 


 Skipping sciqag_question_41.json as sciqag_answer_41.json already exists. 


 Skipping sciqag_question_42.json as sciqag_answer_42.json already exists. 



 ANSWERING QUESTION: sciqag_question_43.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:49:03] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:49:06] Answer:                                                                                                                        

 Skipping sciqag_question_44.json as sciqag_answer_44.json already exists. 


 Skipping sciqag_question_45.json as sciqag_answer_45.json already exists. 


 Skipping sciqag_question_46.json as sciqag_answer_46.json already exists. 



 ANSWERING QUESTION: sciqag_question_47.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:49:26] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:49:28] Answer:                                                                                                                        

 Skipping sciqag_question_48.json as sciqag_answer_48.json already exists. 



 ANSWERING QUESTION: sciqag_question_49.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:49:48] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:49:50] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_5.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:50:11] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:50:13] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_50.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:50:34] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:50:36] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_51.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:50:56] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:50:58] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_52.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:51:18] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:51:21] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_53.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:51:41] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:51:43] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_54.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:52:03] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:52:05] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_55.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:52:26] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:52:28] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_56.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:52:49] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:52:51] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_57.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:53:11] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:53:13] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_58.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:53:34] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:53:36] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_59.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:53:56] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:53:58] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_6.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:54:18] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:54:20] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_60.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:54:41] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:54:43] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_61.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:55:03] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:55:05] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_62.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:55:25] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:55:28] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_63.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:55:48] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:55:50] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_64.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:56:10] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:56:12] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_65.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:56:33] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:56:35] Answer:                                                                                                                        

 Skipping sciqag_question_66.json as sciqag_answer_66.json already exists. 


 Skipping sciqag_question_67.json as sciqag_answer_67.json already exists. 



 ANSWERING QUESTION: sciqag_question_68.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:56:55] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:56:57] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_69.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:57:17] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:57:19] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_7.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:57:40] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:57:42] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_70.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:58:02] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:58:04] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_71.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:58:25] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:58:27] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_72.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:58:48] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:58:50] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_73.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:59:10] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:59:12] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_74.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:59:33] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:59:35] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_75.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[00:59:56] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[00:59:58] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_76.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:00:18] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:00:20] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_77.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:00:41] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:00:43] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_78.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:01:03] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:01:06] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_79.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:01:26] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:01:28] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_8.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:01:48] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:01:51] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_80.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:02:11] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:02:14] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_81.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:02:34] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:02:36] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_82.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:02:56] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:02:58] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_83.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:03:19] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:03:21] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_84.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:03:41] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:03:43] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_85.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:04:04] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:04:06] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_86.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:04:26] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:04:28] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_87.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:04:49] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:04:51] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_88.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:05:11] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:05:13] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_89.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:05:34] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:05:36] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_9.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:05:56] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:05:59] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_90.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:06:19] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:06:21] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_91.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:06:41] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:06:43] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_92.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:07:04] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:07:06] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_93.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:07:26] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:07:28] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_94.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:07:48] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:07:51] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_95.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:08:11] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:08:13] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_96.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:08:33] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:08:35] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_97.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:08:56] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:08:58] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_98.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:09:19] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:09:21] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_99.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[01:09:41] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[01:09:43] Answer:                                                                                                                        
