Running experiment: sciqag_paperqa_llama3.2
saving results to: datasets/SciQAG/answer_results/paperqa_llama3.2 



 Skipping sciqag_question_1.json as sciqag_answer_1.json already exists. 


 Skipping sciqag_question_10.json as sciqag_answer_10.json already exists. 


 Skipping sciqag_question_100.json as sciqag_answer_100.json already exists. 


 Skipping sciqag_question_11.json as sciqag_answer_11.json already exists. 


 Skipping sciqag_question_12.json as sciqag_answer_12.json already exists. 


 Skipping sciqag_question_13.json as sciqag_answer_13.json already exists. 


 Skipping sciqag_question_14.json as sciqag_answer_14.json already exists. 


 Skipping sciqag_question_15.json as sciqag_answer_15.json already exists. 


 Skipping sciqag_question_16.json as sciqag_answer_16.json already exists. 


 Skipping sciqag_question_17.json as sciqag_answer_17.json already exists. 


 Skipping sciqag_question_18.json as sciqag_answer_18.json already exists. 


 Skipping sciqag_question_19.json as sciqag_answer_19.json already exists. 


 Skipping sciqag_question_2.json as sciqag_answer_2.json already exists. 


 Skipping sciqag_question_20.json as sciqag_answer_20.json already exists. 


 Skipping sciqag_question_21.json as sciqag_answer_21.json already exists. 


 Skipping sciqag_question_22.json as sciqag_answer_22.json already exists. 


 Skipping sciqag_question_23.json as sciqag_answer_23.json already exists. 


 Skipping sciqag_question_24.json as sciqag_answer_24.json already exists. 


 Skipping sciqag_question_25.json as sciqag_answer_25.json already exists. 


 Skipping sciqag_question_26.json as sciqag_answer_26.json already exists. 


 Skipping sciqag_question_27.json as sciqag_answer_27.json already exists. 


 Skipping sciqag_question_28.json as sciqag_answer_28.json already exists. 



 ANSWERING QUESTION: sciqag_question_29.json
 ----------------------------- 


Failed to answer question due to timeout: What is the significance of the detection limit (DL) in the analysis of phthalate esters?


 ANSWERING QUESTION: sciqag_question_3.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[20:46:40] Starting paper search for 'diabetic rat model establishment study'.                                                            
[20:46:41] paper_search for query 'diabetic rat model establishment study' and offset 0 returned 7 papers.                                
           Status: Paper Count=7 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
           gather_evidence starting for question 'How was the diabetic rat model established in this study?'.                             

[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

Failed to answer question due to timeout: How was the diabetic rat model established in this study?

 Skipping sciqag_question_30.json as sciqag_answer_30.json already exists. 


 Skipping sciqag_question_31.json as sciqag_answer_31.json already exists. 


 Skipping sciqag_question_32.json as sciqag_answer_32.json already exists. 



 ANSWERING QUESTION: sciqag_question_33.json
 ----------------------------- 


Failed to answer question due to timeout: Why are MIPs considered stable, less costly, and easier to produce than their biological counterparts?


 ANSWERING QUESTION: sciqag_question_34.json
 ----------------------------- 


[20:52:37] Starting paper search for 'molecular imprinting process template molecule removal significance'.                               
           paper_search for query 'molecular imprinting process template molecule removal significance' and offset 0 returned 8 papers.   
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Starting paper search for 'molecular imprinting process template molecule removal significance'.                               
           paper_search for query 'molecular imprinting process template molecule removal significance' and offset 8 returned 0 papers.   
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Generating answer for 'What is the significance of the template molecule'.                                                     

[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[20:53:59] Status: Paper Count=8 | Relevant Papers=1 | Current Evidence=3 | Current Cost=$0.0000                                          
           Answer: The removal of the template molecule from the polymerized material in the molecular imprinting process is crucial for  
           the formation of binding sites and maintaining the shape of the complementary cavity. If the template remains, it can interfere
           with the recognition of the target molecule.                                                                                   
                                                                                                                                          
           My reasoning process involved analyzing the context provided by Author2024 chunk 1 and Author2024 chunk 3, which discussed the 
           removal of the template molecule from the polymerized material in molecular imprinting. These chunks stated that the removal of
           the template is essential for creating binding sites with molecular recognition properties that are complementary in size and  
           shape to the target molecule.                                                                                                  
                                                                                                                                          
           Furthermore, I considered the potential consequences of not removing the template molecule, as mentioned in Author2024 chunk 2.
           According to this chunk, if the template molecules are not removed, they can bind to the target molecule, leading to incorrect 
           binding site recognition and reduced sensor selectivity.                                                                       
                                                                                                                                          
           ANSWER SUMMARY: The removal of the template molecule is crucial for creating functional binding sites with molecular           
           recognition properties that maintain the shape of the complementary cavity, ensuring proper recognition and selectivity of the 
           target molecule.                                                                                                               


 ANSWERING QUESTION: sciqag_question_35.json
 ----------------------------- 


[20:54:04] Starting paper search for 'How does the degree of cross-linking affect the potential response of the MIP based membrane        
           electrode.'.                                                                                                                   
           paper_search for query 'How does the degree of cross-linking affect the potential response of the MIP based membrane           
           electrode.' and offset 0 returned 8 papers.                                                                                    
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
[20:54:06] gather_evidence starting for question 'How does the degree of cross-linking affect the potential response of the MIP based     
           membrane electrode?'.                                                                                                          
[20:55:08] Status: Paper Count=8 | Relevant Papers=1 | Current Evidence=4 | Current Cost=$0.0000                                          
[20:55:09] Generating answer for 'How does the degree of cross-linking affect the potential response of the MIP based membrane            
           electrode?'.                                                                                                                   

[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[20:56:53] Status: Paper Count=8 | Relevant Papers=1 | Current Evidence=4 | Current Cost=$0.0000                                          
           Answer: The degree of cross-linking affects the potential response of the MIP-based membrane electrode.                        
                                                                                                                                          
           My reasoning process involved analyzing the provided context, particularly Author2024 chunk 3. This chunk states that a high   
           degree of cross-linking (mole ratio of 3) results in a wider linear range and lower detection limit compared to other mole     
           ratios. It also mentions potential issues with low-degree cross-linking, such as difficulties in removing the template from the
           polymer, and high-degree cross-linking causing insolubility of MIP in the solvent.                                             
                                                                                                                                          
           I inferred that the degree of cross-linking influences the mechanical properties and chemical stability of the polymer, which  
           in turn affects the potential response of the electrode. The specific mole ratio mentioned suggests a direct relationship      
           between the degree of cross-linking and the performance of the membrane electrode.                                             
                                                                                                                                          
           ANSWER SUMMARY: A high degree of cross-linking improves the linear range and detection limit of MIP-based membrane electrodes  
           by enhancing their chemical stability, while excessive cross-linking can lead to issues such as insolubility.                  


 ANSWERING QUESTION: sciqag_question_36.json
 ----------------------------- 


[20:56:54] Starting paper search for 'machine learning for immunology'.                                                                   
           paper_search for query 'machine learning for immunology' and offset 0 returned 8 papers.                                       
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
           gather_evidence starting for question 'How does the sample pH affect the potential response of the MIP based melamine ISE?'.   
[20:57:15] Generating answer for 'How does the sample pH affect the potential response of the MIP based melamine ISE?'.                   
[20:57:22] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_37.json
 ----------------------------- 


[20:57:23] Starting paper search for 'ion-exchanger resin columns melamine detection'.                                                    
           paper_search for query 'ion-exchanger resin columns melamine detection' and offset 0 returned 7 papers.                        
           Status: Paper Count=7 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
[20:57:24] gather_evidence starting for question 'What is the role of the ion-exchanger resin columns in the detection of melamine?'.     
got papers
[20:57:29] gather_evidence starting for question 'What is the role of the ion-exchanger resin columns in the detection of melamine?'.     
[20:57:35] Generating answer for 'What is the role of the ion-exchanger resin columns in the detection of melamine?'.                     
[20:57:40] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_38.json
 ----------------------------- 


[20:57:41] Starting paper search for 'selectivity coefficient MIP ISE discriminated ions NIP membrane electrode'.                         
           paper_search for query 'selectivity coefficient MIP ISE discriminated ions NIP membrane electrode' and offset 0 returned 6     
           papers.                                                                                                                        
           Status: Paper Count=6 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
           gather_evidence starting for question 'How does the selectivity coefficient of the MIP based ISE towards discriminated ions    
           compare to that of the NIP membrane electrode?'.                                                                               
[20:57:49] Status: Paper Count=6 | Relevant Papers=1 | Current Evidence=2 | Current Cost=$0.0000                                          
           Generating answer for 'How does the selectivity coefficient of the MIP based ISE towards discriminated ions compare to that of 
           the NIP membrane electrode?'.                                                                                                  
[20:57:50] Status: Paper Count=6 | Relevant Papers=1 | Current Evidence=2 | Current Cost=$0.0000                                          
           Answer: Based on the provided context, the selectivity coefficient of the MIP-based ISE towards discriminated ions (such as Na+
           and K+) is not explicitly compared to that of the NIP membrane electrode in any of the given chunks. However, it is mentioned  
           that the MIP-based membrane exhibits high selectivity to melamine ion over other cations, with superior selectivity            
           coefficients for interfering ions like Na+ and K+ compared to the NIP membrane electrode.                                      
                                                                                                                                          
           ANSWER SUMMARY: The comparison between the selectivity coefficient of the MIP-based ISE towards discriminated ions and the NIP 
           membrane electrode is not explicitly stated in the provided context.                                                           


 ANSWERING QUESTION: sciqag_question_39.json
 ----------------------------- 


[20:57:51] Starting paper search for 'flow analysis system MIP based membrane electrode melamine detection milk'.                         
           paper_search for query 'flow analysis system MIP based membrane electrode melamine detection milk' and offset 0 returned 8     
           papers.                                                                                                                        
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
           gather_evidence starting for question 'How promising is the flow analysis system based on the MIP based membrane electrode for 
           the detection of melamine in milk?'.                                                                                           

[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[20:58:45] Generating answer for 'How promising is the flow analysis system based on the MIP based membrane electrode for the detection of
           melamine in milk?'.                                                                                                            
[20:59:05] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_4.json
 ----------------------------- 


[20:59:06] Generating answer for 'What were the key findings regarding glucose metabolism in the study?'.                                 
[20:59:07] Status: Paper Count=0 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Answer: I cannot provide a response based on the provided context as there is no mention of a study or key findings regarding  
           glucose metabolism. If you could provide more information or clarify what you are referring to, I would be happy to help.      
                                                                                                                                          
           ANSWER SUMMARY: Context lacks relevant information about a study and its findings on glucose metabolism.                       


 ANSWERING QUESTION: sciqag_question_40.json
 ----------------------------- 


[20:59:09] Generating answer for 'How can the potential response of the MIP based membrane ISE be characterized?'.                        
[20:59:10] Status: Paper Count=0 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Answer: To characterize the potential response of the MIP-based membrane ISE (Inverted Sample Exchange), we need to understand 
           the role of Molecularly Imprinted Polymers (MIPs) in this process.                                                             
                                                                                                                                          
           MIPs are synthetic polymers that mimic the shape and chemical properties of a target molecule, allowing them to selectively    
           bind to it. In an ISE setup, MIP-based membranes are used to separate and detect target molecules in a solution.               
                                                                                                                                          
           The potential response of the MIP-based membrane ISE can be characterized by analyzing the changes in electrical conductivity  
           or resistance that occur when the target molecule interacts with the MIPs. This interaction causes a change in the membrane's  
           surface charge or permeability, which in turn affects the current flow between the electrodes.                                 
                                                                                                                                          
           Based on this understanding, the potential response of the MIP-based membrane ISE can be characterized by monitoring changes   
           in:                                                                                                                            
                                                                                                                                          
           * Electrical conductivity                                                                                                      
           * Resistance                                                                                                                   
           * Current flow                                                                                                                 
                                                                                                                                          
           These parameters are typically measured using electrochemical techniques such as chronoamperometry or cyclic voltammetry.      
                                                                                                                                          
           ANSWER SUMMARY: The potential response of a MIP-based membrane ISE is characterized by measuring changes in electrical         
           conductivity, resistance, and current flow upon interaction with the target molecule.                                          


 ANSWERING QUESTION: sciqag_question_41.json
 ----------------------------- 


[20:59:12] Generating answer for 'What is the primary technique used in the analysis of the spatial distribution of biomolecules?'.       
[20:59:13] Status: Paper Count=0 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Answer: To analyze the spatial distribution of biomolecules, the primary technique used is **Scanning Transmission Electron    
           Microscopy (STEM)**. STEM is an advanced form of scanning electron microscopy (SEM) that allows for higher resolution imaging  
           at the nanoscale.                                                                                                              
                                                                                                                                          
           STEM works by transmitting a focused beam of electrons through the sample and measuring the transmitted intensity to create    
           images. This technique is particularly useful for analyzing the spatial distribution of biomolecules, such as proteins and     
           nucleic acids, within complex biological systems.                                                                              
                                                                                                                                          
           ANSWER SUMMARY: STEM (Scanning Transmission Electron Microscopy) is the primary technique used for analyzing the spatial       
           distribution of biomolecules due to its ability to provide high-resolution imaging at the nanoscale.                           


 ANSWERING QUESTION: sciqag_question_42.json
 ----------------------------- 


[20:59:14] Generating answer for 'What are the drawbacks of common MALDI imaging matrix deposition methods?'.                             
[20:59:15] Status: Paper Count=0 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Answer: To answer this question, we need to understand what MALDI stands for and how imaging matrix deposition methods are     
           related to it.                                                                                                                 
                                                                                                                                          
           MALDI stands for Matrix-Assisted Laser Desorption/Ionization. It is a technique used in mass spectrometry to analyze large     
           biomolecules such as proteins and DNA.                                                                                         
                                                                                                                                          
           The drawbacks of common MALDI imaging matrix deposition methods can be:                                                        
                                                                                                                                          
           * Poor resolution due to the limited lateral homogeneity of the matrix                                                         
           * Insufficient sensitivity, which can lead to low signal-to-noise ratios                                                       
           * Inability to detect subtle changes in sample composition or structure                                                        
                                                                                                                                          
           These drawbacks arise from the limited uniformity and stability of the imaging matrix used in MALDI experiments.               
                                                                                                                                          
           ANSWER SUMMARY: Common MALDI imaging matrix deposition methods have limitations in resolution, sensitivity, and detecting      
           subtle changes due to matrix inhomogeneity.                                                                                    


 ANSWERING QUESTION: sciqag_question_43.json
 ----------------------------- 


[20:59:16] Starting paper search for '2,5-Dihydroxybenzoic acid (DHB) protocol matrix deposition'.                                        
           paper_search for query '2,5-Dihydroxybenzoic acid (DHB) protocol matrix deposition' and offset 0 returned 7 papers.            
           Status: Paper Count=7 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
[20:59:19] Generating answer for 'What is the role of 2,5-Dihydroxybenzoic acid (DHB) in the described protocol for matrix deposition?'.  
[20:59:22] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_44.json
 ----------------------------- 


[20:59:24] Generating answer for 'How was the dry matrix deposition protocol tested in the study?'.                                       
           Status: Paper Count=0 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
[20:59:25] Generating answer for 'How was the dry matrix deposition protocol tested in the study?'.                                       
[20:59:26] Status: Paper Count=0 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Answer: To provide an accurate response, I need to clarify that there is no context provided about the dry matrix deposition   
           protocol or its testing in the study.                                                                                          
                                                                                                                                          
           However, based on my general knowledge, the dry matrix deposition (DMD) protocol is a technique used in surface engineering and
           nanotechnology. It involves depositing particles onto a substrate using a dry process, such as spray pyrolysis or sol-gel      
           processing.                                                                                                                    
                                                                                                                                          
           If I were to provide an answer assuming the context includes information about the DMD protocol being tested in a study:       
                                                                                                                                          
           The dry matrix deposition protocol was likely tested in the study by applying it to a substrate and measuring its performance. 
           This could involve evaluating the deposited layer's thickness, surface roughness, morphology, or mechanical properties.        
                                                                                                                                          
           ANSWER SUMMARY: The response provided an assumption-based answer due to insufficient context; a more accurate assessment       
           requires specific information about the study's details.                                                                       


 ANSWERING QUESTION: sciqag_question_45.json
 ----------------------------- 


[20:59:27] Starting paper search for 'dry coating method matrix deposition advantages'.                                                   
           paper_search for query 'dry coating method matrix deposition advantages' and offset 0 returned 8 papers.                       
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Starting paper search for 'dry coating method matrix deposition advantages'.                                                   
           paper_search for query 'dry coating method matrix deposition advantages' and offset 8 returned 0 papers.                       
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
[20:59:28] Generating answer for 'What are the advantages of the dry-coating method for matrix deposition?'.                              

[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:00:14] Status: Paper Count=8 | Relevant Papers=3 | Current Evidence=5 | Current Cost=$0.0000                                          
           Answer: The dry-coating method for matrix deposition has several advantages, including:                                        
                                                                                                                                          
           1. Homogeneous coating of the matrix essential for obtaining high-resolution images.                                           
           2. Reduced analyte delocalization.                                                                                             
           3. Simpler apparatus compared to other methods.                                                                                
           4. No need for a wash with ethanol.                                                                                            
                                                                                                                                          
           These advantages allow for the creation of high-quality molecular images with high spatial resolution and optimal matrix       
           coverage, which is beneficial for various applications in scientific research.                                                 
                                                                                                                                          
           Reasoning process: To derive this answer from the context, I analyzed Acros1016 chunk 1 and Acros1016 chunk 2, which describe  
           the dry-coating method for matrix deposition. Both chunks highlight several advantages of the method, including homogeneous    
           coating, reduced analyte delocalization, simpler apparatus, and no need for a wash with ethanol. These advantages are crucial  
           for obtaining high-resolution images in scientific research.                                                                   
                                                                                                                                          
           ANSWER SUMMARY: The dry-coating method offers homogeneous coating, reduced analyte delocalization, and simplified apparatus,   
           resulting in high-quality molecular images with optimal matrix coverage.                                                       


 ANSWERING QUESTION: sciqag_question_46.json
 ----------------------------- 


           Generating answer for 'How does the dry-coating method produce high-quality molecular images?'.                                
[21:00:16] Status: Paper Count=0 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Answer: To address this question, I need to know what "dry-coating method" and "molecular images" refer to. Assuming they are  
           related to microscopy, here's my response:                                                                                     
                                                                                                                                          
           The dry-coating method in microscopy typically involves applying a thin layer of material (e.g., gold, carbon) to the sample   
           surface before imaging. This coating enhances image quality by reducing electron scattering and improving signal-to-noise      
           ratios.                                                                                                                        
                                                                                                                                          
           In the context of producing high-quality molecular images using this method, I infer that it's used for scanning tunneling     
           microscopy (STM) or atomic force microscopy (AFM). The dry-coating process helps to stabilize the tip-sample interaction, which
           is crucial for achieving high-resolution imaging at the molecular level.                                                       
                                                                                                                                          
           Reasoning process: Based on the context, I assumed that "molecular images" and "dry-coating method" are related to microscopy  
           techniques. I used my knowledge of microscopy principles to infer that the dry-coating method enhances image quality by        
           reducing electron scattering and improving signal-to-noise ratios.                                                             
                                                                                                                                          
           ANSWER SUMMARY: The dry-coating method produces high-quality molecular images in microscopy by reducing electron scattering and
           improving signal-to-noise ratios, likely through scanning tunneling microscopy (STM) or atomic force microscopy (AFM).         


 ANSWERING QUESTION: sciqag_question_47.json
 ----------------------------- 


[21:00:17] Starting paper search for 'crystal size matrix tissue sections'.                                                               
           paper_search for query 'crystal size matrix tissue sections' and offset 0 returned 8 papers.                                   
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
           gather_evidence starting for question 'What was the average crystal size of the matrix deposited onto the tissue sections?'.   
[21:00:22] Generating answer for 'What was the average crystal size of the matrix deposited onto the tissue sections?'.                   
[21:00:26] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_48.json
 ----------------------------- 


[21:00:28] Generating answer for 'How was the effectiveness of the dry-coating method assessed?'.                                         
           Status: Paper Count=0 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Answer: I am unable to provide an answer as the provided context is missing relevant information regarding the effectiveness   
           assessment of the dry-coating method.                                                                                          
                                                                                                                                          
           Therefore, I cannot accurately determine how its effectiveness was assessed.                                                   
                                                                                                                                          
           ANSWER SUMMARY: Insufficient context prevents determination of effectiveness assessment.                                       


 ANSWERING QUESTION: sciqag_question_49.json
 ----------------------------- 


[21:00:29] Starting paper search for 'dry-coating method vs spray-coating method'.                                                        
           paper_search for query 'dry-coating method vs spray-coating method' and offset 0 returned 8 papers.                            
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
           gather_evidence starting for question 'How does the dry-coating method compare to the spray-coating method?'.                  
[21:00:36] Status: Paper Count=8 | Relevant Papers=2 | Current Evidence=3 | Current Cost=$0.0000                                          
[21:00:37] Starting paper search for 'dry-coating method vs spray-coating method'.                                                        
           paper_search for query 'dry-coating method vs spray-coating method' and offset 8 returned 0 papers.                            
           Status: Paper Count=8 | Relevant Papers=2 | Current Evidence=3 | Current Cost=$0.0000                                          
got papers
           gather_evidence starting for question 'How does the dry-coating method compare to the spray-coating method?'.                  

[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:01:29] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:01:32] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_5.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:01:52] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:01:54] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_50.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:02:14] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:02:16] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_51.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:02:36] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:02:39] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_52.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:02:59] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:03:01] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_53.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:03:21] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:03:23] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_54.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:03:44] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:03:46] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_55.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:04:06] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:04:08] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_56.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:04:28] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:04:30] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_57.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:04:51] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:04:53] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_58.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:05:13] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:05:15] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_59.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:05:35] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:05:38] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_6.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:05:58] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:06:00] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_60.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:06:20] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:06:22] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_61.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:06:43] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:06:45] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_62.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:07:05] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:07:07] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_63.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:07:27] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:07:30] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_64.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:07:50] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:07:52] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_65.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:08:12] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:08:14] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_66.json
 ----------------------------- 


[21:08:29] Starting paper search for 'gas sensing mechanism of SnO2 NWs sensors explanation'.                                             
           paper_search for query 'gas sensing mechanism of SnO2 NWs sensors explanation' and offset 0 returned 8 papers.                 
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
got papers
           gather_evidence starting for question 'How is the gas sensing mechanism of SnO2 NWs sensors explained?'.                       
[21:08:47] Status: Paper Count=8 | Relevant Papers=1 | Current Evidence=4 | Current Cost=$0.0000                                          
           Generating answer for 'How is the gas sensing mechanism of SnO2 NWs sensors explained?'.                                       
[21:08:49] Status: Paper Count=8 | Relevant Papers=1 | Current Evidence=4 | Current Cost=$0.0000                                          
           Answer: The gas sensing mechanism of SnO2 NWs sensors involves a decrease in resistance when exposed to LPG and NH3 gases due  
           to changes in the depletion region width and barrier potential. When exposed to air, the depletion region's width increases,   
           causing an increase in resistance. In contrast, when exposed to LPG and NH3, the depletion region's width decreases, resulting 
           in a decrease of resistance along the longitudinal SnO2 NWs.                                                                   
                                                                                                                                          
           My reasoning process involved carefully reading through all four chunks of Works5735 and analyzing their relevance to the      
           question. I found that chunk 4 explicitly explains the gas sensing mechanism, while chunks 1, 2, and 3 provide some background 
           information but do not fully explain the mechanism. Chunk 3 from Zhang2174 is not relevant to SnO2 NWs sensors.                
                                                                                                                                          
           ANSWER SUMMARY: The gas sensing mechanism of SnO2 NWs sensors involves changes in depletion region width and barrier potential 
           when exposed to LPG and NH3, resulting in a decrease in resistance.                                                            


 ANSWERING QUESTION: sciqag_question_67.json
 ----------------------------- 


[21:08:50] Starting paper search for 'Au catalyst for synthesizing hierarchical SnO2 nanostructures'.                                     
           paper_search for query 'Au catalyst for synthesizing hierarchical SnO2 nanostructures' and offset 0 returned 8 papers.         
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
           Generating answer for 'What is the significance of the Au catalyst in the synthesis of hierarchical SnO2 nanostructures?'.     
[21:08:58] Status: Paper Count=8 | Relevant Papers=1 | Current Evidence=3 | Current Cost=$0.0000                                          
           Answer: The Au catalyst in the synthesis of hierarchical SnO2 nanostructures enhances gas sensing performance by               
           functionalizing the materials with catalyst active substances. The mechanism involves the Au catalyst playing a role in        
           enhancing oxygen vacancy defects, which leads to more active centers and increased gas response.                               
                                                                                                                                          
           My reasoning process involved analyzing the context from Works5735 chunk 1, which states that the addition of an Au catalyst   
           before the second step of thermal evaporation can enhance the gas sensing properties of hierarchical SnO2 nanostructures. I    
           then examined Works5735 chunk 3, which explicitly mentions that the Au catalyst enhances gas sensing performance by increasing 
           oxygen vacancy defects and creating active centers. Additionally, Works5735 chunk 2 provides insights into how the absence of a
           catalyst affects morphology but does not mention an enhancement in gas sensing properties.                                     
                                                                                                                                          
           ANSWER SUMMARY: The Au catalyst in hierarchical SnO2 nanostructures enhances gas sensing performance by functionalizing        
           materials with catalyst active substances through oxygen vacancy defects.                                                      


 ANSWERING QUESTION: sciqag_question_68.json
 ----------------------------- 


[21:08:59] Starting paper search for 'Hierarchical nanostructures vs SnO2 NWs in gas sensing'.                                            
           paper_search for query 'Hierarchical nanostructures vs SnO2 NWs in gas sensing' and offset 0 returned 8 papers.                
           Status: Paper Count=8 | Relevant Papers=0 | Current Evidence=0 | Current Cost=$0.0000                                          
[21:09:00] Generating answer for 'How does the response of hierarchical nanostructures compare to that of SnO2 NWs in gas sensing?'.      

[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:11:07] Answer:                                                                                                                        

[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.



 ANSWERING QUESTION: sciqag_question_69.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:11:27] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:11:29] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_7.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:11:49] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:11:51] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_70.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:12:11] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:12:14] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_71.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:12:34] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:12:36] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_72.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:12:56] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:12:58] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_73.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:13:19] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:13:21] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_74.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:13:41] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:13:43] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_75.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:14:03] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:14:05] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_76.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:14:25] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:14:28] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_77.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:14:48] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:14:50] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_78.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:15:10] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:15:12] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_79.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:15:33] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:15:35] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_8.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:15:55] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:15:57] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_80.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:16:17] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:16:19] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_81.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:16:40] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:16:42] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_82.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:17:02] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:17:04] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_83.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:17:24] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:17:26] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_84.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:17:47] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:17:49] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_85.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:18:09] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:18:11] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_86.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:18:31] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:18:33] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_87.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:18:54] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:18:56] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_88.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:19:16] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:19:18] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_89.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:19:38] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:19:40] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_9.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:20:01] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:20:03] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_90.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:20:23] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:20:25] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_91.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:20:46] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:20:48] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_92.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:21:08] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:21:11] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_93.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:21:31] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:21:33] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_94.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:21:53] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:21:55] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_95.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:22:15] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:22:17] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_96.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:22:38] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:22:40] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_97.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:23:00] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:23:02] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_98.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:23:22] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:23:25] Answer:                                                                                                                        


 ANSWERING QUESTION: sciqag_question_99.json
 ----------------------------- 



[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.


[1;31mGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new[0m
LiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.

[21:23:45] Trajectory failed.                                                                                                             
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1109 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1106 │   │   │   async with ceil_timeout(                                                                                 │
           │   1107 │   │   │   │   timeout.sock_connect, ceil_threshold=timeout.ceil_threshold                                          │
           │   1108 │   │   │   ):                                                                                                       │
           │ ❱ 1109 │   │   │   │   sock = await aiohappyeyeballs.start_connection(                                                      │
           │   1110 │   │   │   │   │   addr_infos=addr_infos,                                                                           │
           │   1111 │   │   │   │   │   local_addr_infos=self._local_addr_infos,                                                         │
           │   1112 │   │   │   │   │   happy_eyeballs_delay=self._happy_eyeballs_delay,                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:123 in start_connection          │
           │                                                                                                                             │
           │   120 │   │   │   │   │   │   isinstance(exc, OSError) and exc.errno == first_errno                                         │
           │   121 │   │   │   │   │   │   for exc in all_exceptions                                                                     │
           │   122 │   │   │   │   │   ):                                                                                                │
           │ ❱ 123 │   │   │   │   │   │   raise OSError(first_errno, msg)                                                               │
           │   124 │   │   │   │   elif isinstance(first_exception, RuntimeError) and all(                                               │
           │   125 │   │   │   │   │   isinstance(exc, RuntimeError) for exc in all_exceptions                                           │
           │   126 │   │   │   │   ):                                                                                                    │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:477 in acompletion                        │
           │                                                                                                                             │
           │    474 │   │   │   │   │   response = ModelResponse(**init_response)                                                        │
           │    475 │   │   │   │   response = init_response                                                                             │
           │    476 │   │   │   elif asyncio.iscoroutine(init_response):                                                                 │
           │ ❱  477 │   │   │   │   response = await init_response                                                                       │
           │    478 │   │   │   else:                                                                                                    │
           │    479 │   │   │   │   response = init_response  # type: ignore                                                             │
           │    480                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:566 in ollama_acompletion          │
           │                                                                                                                             │
           │   563 │   │   │   )                                                                                                         │
           │   564 │   │   │   return model_response                                                                                     │
           │   565 │   except Exception as e:                                                                                            │
           │ ❱ 566 │   │   raise e  # don't use verbose_logger.exception, if exception is raised                                         │
           │   567                                                                                                                       │
           │   568                                                                                                                       │
           │   569 async def ollama_aembeddings(                                                                                         │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py:507 in ollama_acompletion          │
           │                                                                                                                             │
           │   504 │   try:                                                                                                              │
           │   505 │   │   timeout = aiohttp.ClientTimeout(total=litellm.request_timeout)  # 10 minutes                                  │
           │   506 │   │   async with aiohttp.ClientSession(timeout=timeout) as session:                                                 │
           │ ❱ 507 │   │   │   resp = await session.post(url, json=data)                                                                 │
           │   508 │   │   │                                                                                                             │
           │   509 │   │   │   if resp.status != 200:                                                                                    │
           │   510 │   │   │   │   text = await resp.text()                                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py:696 in _request                         │
           │                                                                                                                             │
           │    693 │   │   │   │   │                                                                                                    │
           │    694 │   │   │   │   │   # connection timeout                                                                             │
           │    695 │   │   │   │   │   try:                                                                                             │
           │ ❱  696 │   │   │   │   │   │   conn = await self._connector.connect(                                                        │
           │    697 │   │   │   │   │   │   │   req, traces=traces, timeout=real_timeout                                                 │
           │    698 │   │   │   │   │   │   )                                                                                            │
           │    699 │   │   │   │   │   except asyncio.TimeoutError as exc:                                                              │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:544 in connect                       │
           │                                                                                                                             │
           │    541 │   │   │   │   if traces:                                                                                           │
           │    542 │   │   │   │   │   for trace in traces:                                                                             │
           │    543 │   │   │   │   │   │   await trace.send_connection_create_start()                                                   │
           │ ❱  544 │   │   │   │   proto = await self._create_connection(req, traces, timeout)                                          │
           │    545 │   │   │   │   if traces:                                                                                           │
           │    546 │   │   │   │   │   for trace in traces:                                                                             │
           │    547 │   │   │   │   │   │   await trace.send_connection_create_end()                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1050 in _create_connection           │
           │                                                                                                                             │
           │   1047 │   │   if req.proxy:                                                                                                │
           │   1048 │   │   │   _, proto = await self._create_proxy_connection(req, traces, timeout)                                     │
           │   1049 │   │   else:                                                                                                        │
           │ ❱ 1050 │   │   │   _, proto = await self._create_direct_connection(req, traces, timeout)                                    │
           │   1051 │   │                                                                                                                │
           │   1052 │   │   return proto                                                                                                 │
           │   1053                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1394 in _create_direct_connection    │
           │                                                                                                                             │
           │   1391 │   │   │   return transp, proto                                                                                     │
           │   1392 │   │   else:                                                                                                        │
           │   1393 │   │   │   assert last_exc is not None                                                                              │
           │ ❱ 1394 │   │   │   raise last_exc                                                                                           │
           │   1395 │                                                                                                                    │
           │   1396 │   async def _create_proxy_connection(                                                                              │
           │   1397 │   │   self, req: ClientRequest, traces: List["Trace"], timeout: "ClientTimeout"                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1363 in _create_direct_connection    │
           │                                                                                                                             │
           │   1360 │   │   │   )                                                                                                        │
           │   1361 │   │   │                                                                                                            │
           │   1362 │   │   │   try:                                                                                                     │
           │ ❱ 1363 │   │   │   │   transp, proto = await self._wrap_create_connection(                                                  │
           │   1364 │   │   │   │   │   self._factory,                                                                                   │
           │   1365 │   │   │   │   │   timeout=timeout,                                                                                 │
           │   1366 │   │   │   │   │   ssl=sslcontext,                                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py:1124 in _wrap_create_connection      │
           │                                                                                                                             │
           │   1121 │   │   except OSError as exc:                                                                                       │
           │   1122 │   │   │   if exc.errno is None and isinstance(exc, asyncio.TimeoutError):                                          │
           │   1123 │   │   │   │   raise                                                                                                │
           │ ❱ 1124 │   │   │   raise client_error(req.connection_key, exc) from exc                                                     │
           │   1125 │                                                                                                                    │
           │   1126 │   async def _wrap_existing_connection(                                                                             │
           │   1127 │   │   self,                                                                                                        │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno 111] Connect call failed 
           ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                                                    
                                                                                                                                          
           During handling of the above exception, another exception occurred:                                                            
                                                                                                                                          
           ╭───────────────────────────────────────────── Traceback (most recent call last) ─────────────────────────────────────────────╮
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:276 in _run_with_timeout_failure                                   │
           │                                                                                                                             │
           │   273 ) -> tuple[PQASession, AgentStatus]:                                                                                  │
           │   274 │   try:                                                                                                              │
           │   275 │   │   async with asyncio.timeout(query.settings.agent.timeout):                                                     │
           │ ❱ 276 │   │   │   status = await rollout()                                                                                  │
           │   277 │   except TimeoutError:                                                                                              │
           │   278 │   │   logger.warning(                                                                                               │
           │   279 │   │   │   f"Agent timeout after {query.settings.agent.timeout}-sec, just answering."                                │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:410 in rollout                                                     │
           │                                                                                                                             │
           │   407 │   │   │   │   )                                                                                                     │
           │   408 │   │   │   │   return AgentStatus.TRUNCATED                                                                          │
           │   409 │   │   │   agent_state.messages += obs                                                                               │
           │ ❱ 410 │   │   │   for attempt in Retrying(                                                                                  │
           │   411 │   │   │   │   stop=stop_after_attempt(5),                                                                           │
           │   412 │   │   │   │   retry=retry_if_exception_type(MalformedMessageError),                                                 │
           │   413 │   │   │   │   before_sleep=before_sleep_log(logger, logging.WARNING),                                               │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:443 in __iter__                      │
           │                                                                                                                             │
           │   440 │   │                                                                                                                 │
           │   441 │   │   retry_state = RetryCallState(self, fn=None, args=(), kwargs={})                                               │
           │   442 │   │   while True:                                                                                                   │
           │ ❱ 443 │   │   │   do = self.iter(retry_state=retry_state)                                                                   │
           │   444 │   │   │   if isinstance(do, DoAttempt):                                                                             │
           │   445 │   │   │   │   yield AttemptManager(retry_state=retry_state)                                                         │
           │   446 │   │   │   elif isinstance(do, DoSleep):                                                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:376 in iter                          │
           │                                                                                                                             │
           │   373 │   │   self._begin_iter(retry_state)                                                                                 │
           │   374 │   │   result = None                                                                                                 │
           │   375 │   │   for action in self.iter_state.actions:                                                                        │
           │ ❱ 376 │   │   │   result = action(retry_state)                                                                              │
           │   377 │   │   return result                                                                                                 │
           │   378 │                                                                                                                     │
           │   379 │   def _begin_iter(self, retry_state: "RetryCallState") -> None:  # noqa                                             │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/tenacity/__init__.py:398 in <lambda>                      │
           │                                                                                                                             │
           │   395 │                                                                                                                     │
           │   396 │   def _post_retry_check_actions(self, retry_state: "RetryCallState") -> None:                                       │
           │   397 │   │   if not (self.iter_state.is_explicit_retry or self.iter_state.retry_run_result):                               │
           │ ❱ 398 │   │   │   self._add_action_func(lambda rs: rs.outcome.result())                                                     │
           │   399 │   │   │   return                                                                                                    │
           │   400 │   │                                                                                                                 │
           │   401 │   │   if self.after is not None:                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:449 in result                               │
           │                                                                                                                             │
           │   446 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                                                │
           │   447 │   │   │   │   │   raise CancelledError()                                                                            │
           │   448 │   │   │   │   elif self._state == FINISHED:                                                                         │
           │ ❱ 449 │   │   │   │   │   return self.__get_result()                                                                        │
           │   450 │   │   │   │                                                                                                         │
           │   451 │   │   │   │   self._condition.wait(timeout)                                                                         │
           │   452                                                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/concurrent/futures/_base.py:401 in __get_result                         │
           │                                                                                                                             │
           │   398 │   def __get_result(self):                                                                                           │
           │   399 │   │   if self._exception:                                                                                           │
           │   400 │   │   │   try:                                                                                                      │
           │ ❱ 401 │   │   │   │   raise self._exception                                                                                 │
           │   402 │   │   │   finally:                                                                                                  │
           │   403 │   │   │   │   # Break a reference cycle with the exception in self._exception                                       │
           │   404 │   │   │   │   self = None                                                                                           │
           │                                                                                                                             │
           │ /home/hice1/swong97/cRAG/paper-qa/paperqa/agents/main.py:417 in rollout                                                     │
           │                                                                                                                             │
           │   414 │   │   │   │   reraise=True,                                                                                         │
           │   415 │   │   │   ):                                                                                                        │
           │   416 │   │   │   │   with attempt:  # Retrying if ToolSelector fails to select a tool                                      │
           │ ❱ 417 │   │   │   │   │   action = await agent(agent_state.messages, tools)                                                 │
           │   418 │   │   │   agent_state.messages = [*agent_state.messages, action]                                                    │
           │   419 │   │   │   if on_agent_action_callback:                                                                              │
           │   420 │   │   │   │   await on_agent_action_callback(action, agent_state)                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aviary/tools/utils.py:182 in __call__                     │
           │                                                                                                                             │
           │   179 │   │   │   self._ledger.messages.extend(messages)                                                                    │
           │   180 │   │   │   messages = self._ledger.messages                                                                          │
           │   181 │   │                                                                                                                 │
           │ ❱ 182 │   │   model_response = await self._bound_acompletion(                                                               │
           │   183 │   │   │   messages=MessagesAdapter.dump_python(                                                                     │
           │   184 │   │   │   │   messages, exclude_none=True, by_alias=True                                                            │
           │   185 │   │   │   ),                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:817 in acompletion                      │
           │                                                                                                                             │
           │    814 │   │   │   │   │   original_exception=e,                                                                            │
           │    815 │   │   │   │   )                                                                                                    │
           │    816 │   │   │   )                                                                                                        │
           │ ❱  817 │   │   │   raise e                                                                                                  │
           │    818 │                                                                                                                    │
           │    819 │   async def _acompletion(                                                                                          │
           │    820 │   │   self, model: str, messages: List[Dict[str, str]], **kwargs                                                   │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:793 in acompletion                      │
           │                                                                                                                             │
           │    790 │   │   │   if request_priority is not None and isinstance(request_priority, int):                                   │
           │    791 │   │   │   │   response = await self.schedule_acompletion(**kwargs)                                                 │
           │    792 │   │   │   else:                                                                                                    │
           │ ❱  793 │   │   │   │   response = await self.async_function_with_fallbacks(**kwargs)                                        │
           │    794 │   │   │   end_time = time.time()                                                                                   │
           │    795 │   │   │   _duration = end_time - start_time                                                                        │
           │    796 │   │   │   asyncio.create_task(                                                                                     │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2795 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2792 │   │   │   │   │   │   )                                                                                            │
           │   2793 │   │   │   │   │   )                                                                                                │
           │   2794 │   │   │                                                                                                            │
           │ ❱ 2795 │   │   │   raise original_exception                                                                                 │
           │   2796 │                                                                                                                    │
           │   2797 │   def _handle_mock_testing_fallbacks(                                                                              │
           │   2798 │   │   self,                                                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2631 in async_function_with_fallbacks   │
           │                                                                                                                             │
           │   2628 │   │   │   │   content_policy_fallbacks=content_policy_fallbacks,                                                   │
           │   2629 │   │   │   )                                                                                                        │
           │   2630 │   │   │                                                                                                            │
           │ ❱ 2631 │   │   │   response = await self.async_function_with_retries(*args, **kwargs)                                       │
           │   2632 │   │   │   verbose_router_logger.debug(f"Async Response: {response}")                                               │
           │   2633 │   │   │   return response                                                                                          │
           │   2634 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2967 in async_function_with_retries     │
           │                                                                                                                             │
           │   2964 │   │   │   │   setattr(original_exception, "max_retries", num_retries)                                              │
           │   2965 │   │   │   │   setattr(original_exception, "num_retries", current_attempt)                                          │
           │   2966 │   │   │                                                                                                            │
           │ ❱ 2967 │   │   │   raise original_exception                                                                                 │
           │   2968 │                                                                                                                    │
           │   2969 │   async def make_call(self, original_function: Any, *args, **kwargs):                                              │
           │   2970 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2879 in async_function_with_retries     │
           │                                                                                                                             │
           │   2876 │   │   │   │   model_group=model_group, kwargs=kwargs                                                               │
           │   2877 │   │   │   )                                                                                                        │
           │   2878 │   │   │   # if the function call is successful, no exception will be raised and we'll                              │
           │        break out of the loop                                                                                                │
           │ ❱ 2879 │   │   │   response = await self.make_call(original_function, *args, **kwargs)                                      │
           │   2880 │   │   │                                                                                                            │
           │   2881 │   │   │   return response                                                                                          │
           │   2882 │   │   except Exception as e:                                                                                       │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:2976 in make_call                       │
           │                                                                                                                             │
           │   2973 │   │   model_group = kwargs.get("model")                                                                            │
           │   2974 │   │   response = original_function(*args, **kwargs)                                                                │
           │   2975 │   │   if inspect.iscoroutinefunction(response) or inspect.isawaitable(response):                                   │
           │ ❱ 2976 │   │   │   response = await response                                                                                │
           │   2977 │   │   ## PROCESS RESPONSE HEADERS                                                                                  │
           │   2978 │   │   await self.set_response_headers(response=response, model_group=model_group)                                  │
           │   2979                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:947 in _acompletion                     │
           │                                                                                                                             │
           │    944 │   │   │   )                                                                                                        │
           │    945 │   │   │   if model_name is not None:                                                                               │
           │    946 │   │   │   │   self.fail_calls[model_name] += 1                                                                     │
           │ ❱  947 │   │   │   raise e                                                                                                  │
           │    948 │                                                                                                                    │
           │    949 │   def _update_kwargs_before_fallbacks(self, model: str, kwargs: dict) -> None:                                     │
           │    950 │   │   """                                                                                                          │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/router.py:915 in _acompletion                     │
           │                                                                                                                             │
           │    912 │   │   │   │   │   parent_otel_span=parent_otel_span,                                                               │
           │    913 │   │   │   │   )                                                                                                    │
           │    914 │   │   │   │                                                                                                        │
           │ ❱  915 │   │   │   │   response = await _response                                                                           │
           │    916 │   │   │                                                                                                            │
           │    917 │   │   │   ## CHECK CONTENT FILTER ERROR ##                                                                         │
           │    918 │   │   │   if isinstance(response, ModelResponse):                                                                  │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1175 in wrapper_async                    │
           │                                                                                                                             │
           │   1172 │   │   │   │   │   else:                                                                                            │
           │   1173 │   │   │   │   │   │   kwargs["model"] = context_window_fallback_dict[model]                                        │
           │   1174 │   │   │   │   │   return await original_function(*args, **kwargs)                                                  │
           │ ❱ 1175 │   │   │   raise e                                                                                                  │
           │   1176 │                                                                                                                    │
           │   1177 │   is_coroutine = inspect.iscoroutinefunction(original_function)                                                    │
           │   1178                                                                                                                      │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/utils.py:1031 in wrapper_async                    │
           │                                                                                                                             │
           │   1028 │   │   │   │   return _caching_handler_response.final_embedding_cached_response                                     │
           │   1029 │   │   │                                                                                                            │
           │   1030 │   │   │   # MODEL CALL                                                                                             │
           │ ❱ 1031 │   │   │   result = await original_function(*args, **kwargs)                                                        │
           │   1032 │   │   │   end_time = datetime.datetime.now()                                                                       │
           │   1033 │   │   │   if "stream" in kwargs and kwargs["stream"] is True:                                                      │
           │   1034 │   │   │   │   if (                                                                                                 │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py:499 in acompletion                        │
           │                                                                                                                             │
           │    496 │   │   return response                                                                                              │
           │    497 │   except Exception as e:                                                                                           │
           │    498 │   │   custom_llm_provider = custom_llm_provider or "openai"                                                        │
           │ ❱  499 │   │   raise exception_type(                                                                                        │
           │    500 │   │   │   model=model,                                                                                             │
           │    501 │   │   │   custom_llm_provider=custom_llm_provider,                                                                 │
           │    502 │   │   │   original_exception=e,                                                                                    │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:212 │
           │ 5 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2122 │   │   # don't let an error with mapping interrupt the user from receiving an error                                 │
           │        from the llm api calls                                                                                               │
           │   2123 │   │   if exception_mapping_worked:                                                                                 │
           │   2124 │   │   │   setattr(e, "litellm_response_headers", litellm_response_headers)                                         │
           │ ❱ 2125 │   │   │   raise e                                                                                                  │
           │   2126 │   │   else:                                                                                                        │
           │   2127 │   │   │   for error_type in litellm.LITELLM_EXCEPTION_TYPES:                                                       │
           │   2128 │   │   │   │   if isinstance(e, error_type):                                                                        │
           │                                                                                                                             │
           │ /home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py:210 │
           │ 1 in exception_type                                                                                                         │
           │                                                                                                                             │
           │   2098 │   │   │   │   │   request=original_exception.request,                                                              │
           │   2099 │   │   │   │   )                                                                                                    │
           │   2100 │   │   │   else:                                                                                                    │
           │ ❱ 2101 │   │   │   │   raise APIConnectionError(                                                                            │
           │   2102 │   │   │   │   │   message="{}\n{}".format(                                                                         │
           │   2103 │   │   │   │   │   │   str(original_exception), traceback.format_exc()                                              │
           │   2104 │   │   │   │   │   ),                                                                                               │
           ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
           APIConnectionError: litellm.APIConnectionError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1109, in                 
           _wrap_create_connection                                                                                                        
               sock = await aiohappyeyeballs.start_connection(                                                                            
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                            
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohappyeyeballs/impl.py", line 123, in              
           start_connection                                                                                                               
               raise OSError(first_errno, msg)                                                                                            
           ConnectionRefusedError: [Errno 111] Multiple exceptions: [Errno 111] Connect call failed ('::1', 11434, 0, 0), [Errno 111]     
           Connect call failed ('127.0.0.1', 11434)                                                                                       
                                                                                                                                          
           The above exception was the direct cause of the following exception:                                                           
                                                                                                                                          
           Traceback (most recent call last):                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/main.py", line 477, in acompletion           
               response = await init_response                                                                                             
                          ^^^^^^^^^^^^^^^^^^^                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 566, in                
           ollama_acompletion                                                                                                             
               raise e  # don't use verbose_logger.exception, if exception is raised                                                      
               ^^^^^^^                                                                                                                    
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/litellm/llms/ollama.py", line 507, in                
           ollama_acompletion                                                                                                             
               resp = await session.post(url, json=data)                                                                                  
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/client.py", line 696, in _request            
               conn = await self._connector.connect(                                                                                      
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 544, in connect          
               proto = await self._create_connection(req, traces, timeout)                                                                
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1050, in                 
           _create_connection                                                                                                             
               _, proto = await self._create_direct_connection(req, traces, timeout)                                                      
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1394, in                 
           _create_direct_connection                                                                                                      
               raise last_exc                                                                                                             
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1363, in                 
           _create_direct_connection                                                                                                      
               transp, proto = await self._wrap_create_connection(                                                                        
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                        
             File "/home/hice1/swong97/.conda/envs/cRAG/lib/python3.11/site-packages/aiohttp/connector.py", line 1124, in                 
           _wrap_create_connection                                                                                                        
               raise client_error(req.connection_key, exc) from exc                                                                       
           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:11434 ssl:default [Multiple exceptions: [Errno
           111] Connect call failed ('::1', 11434, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 11434)]                           
                                                                                                                                          
           Received Model Group=ollama/llama3.2                                                                                           
           Available Model Group Fallbacks=None LiteLLM Retried: 2 times, LiteLLM Max Retries: 3                                          
[21:23:47] Answer:                                                                                                                        
